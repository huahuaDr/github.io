<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java并发-首页</title>
    <url>/2020/04/09/Java%E5%B9%B6%E5%8F%91-%E9%A6%96%E9%A1%B5/</url>
    <content><![CDATA[<h2><span id="简介">简介：</span></h2><p>基本包含了Java并发编程的知识内容同时囊括并发Concurrent包的重点源码分析，如有问题欢迎评论指出，谢谢支持！<br>关注微信公众号获取更多知识：当代猿<br><img src="https://img-blog.csdnimg.cn/20200409181814334.png#pic_center" alt="微信公共号二维码"></p>
<h2><span id="思维导图">思维导图：</span></h2><p><img src="https://img-blog.csdnimg.cn/20200409181910892.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VzZV9hZG1pbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>注意：思维导图链接，待完成后一起公布。</p>
<h2><span id="目录">目录：</span></h2><p>说明：目录会持续更新</p>
<ol>
<li>Java-并发编程-认识并发编程</li>
<li>Java-并发基础-线程的基本状态和操作</li>
<li>Java-并发理论-JMM内存模型</li>
<li>Java-并发理论-对象锁（monitor）</li>
<li>Java-并发理论-关键字-synchronized</li>
<li>Java-并发理论-关键字-volatile</li>
<li>Java-并发理论-关键字-final</li>
<li>Java-并发理论-三大特性</li>
<li>Java-并发理论-源码分析-Thread类</li>
<li>Java-并发concurrent包-简介</li>
<li>Java-并发concurrent包-atomic包</li>
<li>Java-并发concurrent包-locks包</li>
<li>Java-并发工具-并发容器-ConcurrentHashMap</li>
<li>Java-并发工具-并发容器-CopyOnWriteArrayList</li>
<li>Java-并发工具-并发容器-CopyOnWriteSet</li>
<li>Java-并发工具-并发容器-阻塞队列</li>
<li>Java-并发工具-线程池-原理&amp;ThreadPoolEcecutor</li>
<li>Java-并发工具-线程池-原理&amp;ScheduledThreadPoolExecutor</li>
<li>Java-并发工具-基本类FutureTask</li>
<li>Java-并发工具-工具类Excutors</li>
<li>Java-并发工具-工具类CountDownLatch</li>
<li>Java-并发工具-工具类CyclicBarrier</li>
<li>Java-并发工具-工具类Semaphore</li>
<li>Java-并发工具-工具类Exchanger</li>
<li>Java-并发实践-生产者与消费者</li>
</ol>
]]></content>
      <categories>
        <category>Java并发</category>
      </categories>
      <tags>
        <tag>java,并发</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-并发基础-认识并发编程</title>
    <url>/2020/04/07/Java-%E5%B9%B6%E5%8F%91%E5%9F%BA%E7%A1%80-%E8%AE%A4%E8%AF%86%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h1><span id="一-简介">一、简介</span></h1><h2><span id="1-什么是并发">1. 什么是并发</span></h2><p>在Java中并发就是指多线程的进程环境，进程是系统进行资源分配和调度的独立单位，每一个进程都有它的内存空间和系统资源，在同一个进程内执行的多个任务就可以看作是多个进程，线程存在于进程内，进程负责分配调度线程，线程负责执行程序，多个线程就执行多个程序。</p>
<p>实际上，Java程序天生就是一个多线程程序，包含了：</p>
<ul>
<li><p>分发处理发送给JVM信号的线程</p>
</li>
<li><p>调用对象的finalize清除方法的线程</p>
</li>
<li><p>清除相互引用reference的线程</p>
</li>
<li><p>main线程，也就是用户程序的入口，main线程里面还可以拥有很多的子线程</p>
</li>
</ul>
<h2><span id="2-为什么需要多线程">2. 为什么需要多线程</span></h2><p>如果没有多线程，若为了使程序并发执行，那么系统需要花费大量的时间在：创建进程–&gt;撤销进程–&gt;进程上下文切换调度,在这一过程中，需要的空间开销也非常大，执行效率也非常低（如下图）；若在一个进程中执行多个线程，则上面的空间开销和时间花费将会大大较少，何乐而不为呢，多线程提高了系统的执行效率，充分利用多核CPU的计算能力，提高应用性能。<br><img src="/images/concurrent-1-1.png" alt="多线程"></p>
<a id="more"></a>
<h1><span id="二-并发编程带来的问题">二、并发编程带来的问题</span></h1><h2><span id="1-频繁的上下文切换问题">1. 频繁的上下文切换问题</span></h2><p>正如上图中的时间片，时间片使CPU分配给各个线程的时间，因为时间非常短，所以CPU需要不断切换线程，让我们觉得多个线程是同时执行的，时间片一般是十几毫秒；每次切换都需要保存当前线程的状态，以便进行恢复先前的状态。这个切换是非常耗性能的，过于频繁就无法发挥出多线程编程的优势了。那么该怎么解决这频繁的上下文切换的问题的，目前有大概几种解决方法，后面会详细讨论：</p>
<ul>
<li><p>采用无锁并发编程：JDK8以前的concurrentHashMap采用的锁分段思想，不同线程处理不同段的数据，这样在多线程环境下可以减少上下文的切换时间。</p>
</li>
<li><p>采用CAS算法：JDK8以后的concurrentHashMap采用的是无锁CAS算法；利用Atomic和乐观锁，可以减少一部分不必要的锁竞争带来的上下文切换。</p>
</li>
<li><p>尽量减少线程的使用：避免创建不需要的线程，比如任务少，但是创建了很多的线程，这样会造成大量的线程都处于等待状态。</p>
</li>
<li><p>采用协程：在单线程里实现多任务的调度，并在单线程里维持多个任务间的切换。</p>
</li>
</ul>
<p>因此，并发累加未必会比串行累加的速度快，这上下文切换的问题在实际中是需要解决的。</p>
<h2><span id="2-线程安全问题主要问题也是我们程序开发关心的问题">2. 线程安全问题（主要问题，也是我们程序开发关心的问题）</span></h2><p>对线程编程中最难控制的就是临界区（共享内存的地方）的线程安全问题，稍微不注意就会出现死锁的情况，一旦产生死锁就会造成系统功能不可用。那么怎么解决这种问题呢，解决方法如下：</p>
<ul>
<li><p>避免一个线程同时获取多个锁</p>
</li>
<li><p>避免一个线程在锁内部占用多个资源，尽量保证一个锁只占用一个资源</p>
</li>
<li><p>尝试使用定时锁，使用lock.tryLock(timeOut),当超时等待时当前线程也不会阻塞</p>
</li>
<li><p>对于数据库锁，加锁和解锁必须在同一个数据库连接里（同一个事务），否则会出现解锁失败的情况</p>
</li>
</ul>
<p>后面还有JMM内存模型在原子性、有序性和可见性带来的问题，比如数据脏读，内存泄漏等等问题，这是又该如何保证线程安全呢，这一方面是非常重要的，后面会详细讨论。</p>
<h1><span id="三-并发编程的相关概念">三、并发编程的相关概念</span></h1><h2><span id="1-同步和异步">1. 同步和异步</span></h2><p>同步和异步通常用来形容方法的一次调用。</p>
<p>同步方法从被调用开始，调用者就必须等待被调用的方法结束后，调用者后面的代码才能继续执行。</p>
<p>异步方法指的是，调用者不管被调用方法是否完成，都会继续执行后面的代码，当被调用的方法完成后会通知调用者。</p>
<h2><span id="2-并发和并行">2. 并发和并行</span></h2><p>并发是指多个任务线程交替进行。</p>
<p>并行是指真正意义上的“同时进行”。</p>
<p>实际上，如果系统只有一个CPU，而使用多线程时，那么真实环境下时不能并行执行的，只能通过切换时间片的方式交替进行，完成并发执行任务，真正的并行只能出现在拥有多个CPU系统中。</p>
<h2><span id="3-阻塞和非阻塞">3. 阻塞和非阻塞</span></h2><p>阻塞和非阻塞通常用来形容多线程间的相互影响。</p>
<p>阻塞是指如果一个线程占用了临界区的资源，那么其他线程需要这个资源的话就必须等待资源的释放，就会导致等待的线程挂起，这种情况就叫做阻塞。</p>
<p>非阻塞刚好跟阻塞相反，它强调的是没有一个线程可以阻塞其他线程，所有的线程都会尝试的向前运行。</p>
<h2><span id="4-临界区">4. 临界区</span></h2><p>临界区用来表示一种公共资源会共享数据，可以被多个线程使用，出于线程安全问题，如果一个线程占用了临界区的资源，那么其他线程就必须等待，知道临界区的资源被释放。</p>
<h2><span id="5-守护线程">5. 守护线程</span></h2><p>守护线程是一种特殊的线程，是系统的服务线程，是专门为其他线程服务的，像垃圾回收线程就是守护线程，与之对应的是用户线程，用户线程作为系统的工作线程，守护线程的服务对象就是用户线程，当全部的用户线程执行任务完成之后，这个系统就没有什么需要服务的了，那么守护线程就没有对象需要守护了，那么守护线程就会结束，也就是说当一个java程序只有守护线程的时候，虚拟机就会退出了。</p>
<h1><span id="四-java中的线程thread类">四、Java中的线程Thread类</span></h1><p>Thread类是启动线程并执行任务的基本类，通过实现Runnable接口的run方法或实现Callable接口的Call方法来创建线程执行的任务，这些任务的创建方式有三种：</p>
<pre><code>继承Thread类，重写run方法，直接调用Thread类的方法启动线程

实现Runnable接口，重写run方法，通过创建Thread对象并传入Runnable，调用Thread类的方法启动线程。

实现Callable接口，重写call方法，将其封装成FutureTask类型，通过创建Thread对象并闯入FutureTask，调用Thread类方法启动线程。</code></pre><p>线程的基本属性</p>
<h2><span id="1优先级">1.优先级</span></h2><p>Thread 有个优先级字段：private int priority</p>
<p>操作系统采用时间片（CPU 单次执行某线程的时间）的形式来调度线程的运行，线程被 CPU 调用的时间超过它的时间片后，就会发生线程调度。</p>
<p>线程的优先级可以在一定程度上影响它得到时间片的多少，也就是被处理的机会。</p>
<p>Java 中 Thread 的优先级为从 1 到 10 逐渐提高，默认为 5。</p>
<p>有长耗时操作的线程，一般建议设置低优先级，确保处理器不会被独占太久；</p>
<p>频繁阻塞（休眠或者 I/O）的线程建议设置高优先级。</p>
<p> public final static int MIN_PRIORITY = 1;</p>
<p> //线程的默认优先级</p>
<p> public final static int NORM_PRIORITY = 5;</p>
<p> public final static int MAX_PRIORITY = 10;</p>
<pre><code>线程优先级只是对操作系统分配时间片的建议。

虽然Java 提供了 10 个优先级别，但不同的操作系统的优先级并不相同，不能很好的和 Java 的 10 个优先级别对应。&gt;所以我们应该使用 MAX_PRIORITY、MIN_PRIORITY 和 NORM_PRIORITY 三个静态常量来设定优先级，这样才能保证程序最好的可移植性。</code></pre><h2><span id="2守护线程">2.守护线程</span></h2><p>Java 中，线程也分三六九等。守护线程相当于小弟，做一些后台调度、支持性工作,比如 JVM 的垃圾回收、内存管理等线程都是守护线程。</p>
<p>Thread 中有个布尔值标识当前线程是否为守护线程：</p>
<p>privateboolean     daemon = false;</p>
<p>同时也提供了设置和查看当前线程是否为守护线程的方法：</p>
<p>publicfinal void setDaemon(boolean on) {</p>
<pre><code>checkAccess();

if (isAlive()) {

    throw newIllegalThreadStateException();

}

daemon = on;</code></pre><p>}</p>
<p>publicfinal boolean isDaemon() {</p>
<pre><code>return daemon;</code></pre><p>}</p>
<pre><code>Daemon 属性需要在调用线程的 start() 方法之前调用。</code></pre><p>一个进程中，如果所有线程都退出了，Java 虚拟机就会退出。注意了，这里的“所有”就不包括守护线程，也就是说，当除守护线程外的其他线程都结束后，Java 虚拟机就会退出，然后将守护进程终止。</p>
<p>这里需要注意的是，由于上述特性，Java 虚拟机退出后，在守护线程中的 finally 块中的代码不一定执行。</p>
<p>举个例子：</p>
<p>publicclass DaemonTreadTest0 {</p>
<pre><code>static class DaemonThread extends Thread{

    @Override

    public void run() {

        try {

            Thread.sleep(1000);

        } catch (InterruptedException e) {

            e.printStackTrace();

        }finally {

           System.out.println(Thread.currentThread().getName() + &quot; finally iscalled!&quot;);

        }

    }

}



public static void main(String[] args) {

    DaemonThread thread = newDaemonThread();

    thread.setDaemon(true);

    thread.start();

}</code></pre><p>}</p>
<p>上述代码中将线程设置为守护线程，由于 main 线程启动 DaemonThread 后就结束，此时虚拟机中没有非守护线程，虚拟机也会退出，守护进程被终止，但是它的 finally 块中的内容却没有被调用。</p>
<p>如果将setDaemon方法注释掉，就会发现有运行结果:</p>
<pre><code>Thread-0 finally is called!</code></pre><p>因此，守护线程中不能依靠 finally 块进行资源关闭和清理。</p>
<h2><span id="3线程的生命周期">3.线程的生命周期</span></h2><p>线程具有如下几个状态：</p>
<p>线程状态        介绍        备注</p>
<p>NEW        新创建        还未调用 start() 方法；还不是活着的 (alive)</p>
<p>RUNNABLE        就绪的        调用了 start() ，此时线程已经准备好被执行，处于就绪队列；是活着的(alive)</p>
<p>RUNNING        运行中        线程获得 CPU 资源，正在执行任务；活着的</p>
<p>BLOCKED        阻塞的        线程阻塞于锁或者调用了 sleep；活着的</p>
<p>WAITING        等待中        线程由于某种原因等待其他线程；或者的</p>
<p>TIME_WAITING        超时等待        与 WAITING 的区别是可以在特定时间后自动返回；活着的</p>
<p>TERMINATED        终止        执行完毕或者被其他线程杀死；不是活着的</p>
<p>有几点注意：<br>    Java 中的Thread 运行状态没有 RUNNING 这一步，运行中的线程状态是 RUNNABLE<br>    三个让线程进入 WAITING 状态的方法<br>        Object.wait()<br>        Thread.join()<br>        LockSupport.park()<br>        Lock.lock()<br>Java 中关于“线程是否活着”的定义</p>
<p>Thread 中有个判断是否为活着的方法：</p>
<p>publicfinal native boolean isAlive()</p>
<p>Java 中线程除了 NEW 和 TERMINITED 状态，其他状态下调用 isAlive() 方法均返回 true，也就是活着的。</p>
<p>线程的关键方法</p>
<p>1.Thread.sleep()</p>
<p>Thread.sleep() 是一个静态方法：</p>
<p>publicstatic native void sleep(long millis) throws InterruptedException;</p>
<p>sleep() 方法：</p>
<pre><code>使当前所在线程进入阻塞

只是让出CPU ，并没有释放对象锁

由于休眠时间结束后不一定会立即被 CPU 调度，因此线程休眠的时间可能大于传入参数

如果被中断会抛出 InterruptedException</code></pre><p>注意上面的第一条！由于 sleep 是静态方法，它的作用时使当前所在线程阻塞。因此最好在线程内部直接调用 Thread.sleep()，如果你在主线程调用某个线程的sleep() 方法，其实阻塞的是主线程！</p>
<p>2.Object.wait()</p>
<p>与Thread.sleep() 容易混淆的是 Object.wait() 方法。</p>
<p>Object.wait() 方法：</p>
<pre><code>让出CPU，释放对象锁

在调用前需要先拥有某对象的锁，所以一般在 synchronized 同步块中使用

使该线程进入该对象监视器的等待队列</code></pre><p>3.Thread.yield()</p>
<p>Thread. yield() 也是一个静态方法：</p>
<p>publicstatic native void yield();</p>
<p>“Thread.yield() 表示暂停当前线程，让出 CPU 给优先级与当前线程相同，或者优先级比当前线程更高的就绪状态的线程。 和 sleep() 方法不同的是，它不会进入到阻塞状态，而是进入到就绪状态。</p>
<pre><code>yield() 方法只是让当前线程暂停一下，重新进入就绪的线程池中。



yield() 一般使用较少。</code></pre><p>4.Thread.join()</p>
<p>Thread.join() 表示线程合并，调用的当前线程会进入阻塞状态，需要等待被调用线程结束后才可以执行。</p>
<pre><code>线程的合并的含义就是将几个并发执行线程的线程合并为一个单线程执行。</code></pre><p>比如下述代码：</p>
<p>Threadthread = new Thread(new Runnable() {</p>
<pre><code>@Override

public void run() {

    System.out.println(&quot;thread isrunning!&quot;);

    try {

        Thread.sleep(5000);

    } catch (InterruptedException e) {

        e.printStackTrace();

    }

}</code></pre><p>});</p>
<p>thread.start();</p>
<p>thread.join();</p>
<p>System.out.println(“mainthread “);</p>
<p>我们在主线程调用了 thread.join() 方法，该线程会在输出一句话后休眠 5 秒，等该线程结束后主线程才可以继续执行，输出最后一句结果：</p>
<pre><code>thread is running!

main thread</code></pre><p>Thread.join 源码：</p>
<p>//无参方法</p>
<p>publicfinal void join() throws InterruptedException {</p>
<pre><code>join(0);</code></pre><p>}</p>
<p>//有参方法，表示等待 millis 毫秒后自动返回</p>
<p>publicfinal synchronized void join(long millis)</p>
<p>throwsInterruptedException {</p>
<pre><code>long base = System.currentTimeMillis();

long now = 0;



if (millis &lt; 0) {

    throw newIllegalArgumentException(&quot;timeout value is negative&quot;);

}



if (millis == 0) {

    while (isAlive()) {

        wait(0);

    }

} else {

    while (isAlive()) {

        long delay = millis - now;

        if (delay &lt;= 0) {

            break;

        }

        wait(delay);

        now = System.currentTimeMillis() -base;

    }

}</code></pre><p>}</p>
<p>//有参方法，表示等待 millis + (nanos - 50000) 毫秒后结束</p>
<p>publicfinal synchronized void join(long millis, int nanos)</p>
<p>throwsInterruptedException {</p>
<pre><code>if (millis &lt; 0) {

    throw newIllegalArgumentException(&quot;timeout value is negative&quot;);

}



if (nanos &lt; 0 || nanos &gt; 999999) {

    throw new IllegalArgumentException(

                        &quot;nanosecondtimeout value out of range&quot;);

}



if (nanos &gt;= 500000 || (nanos != 0&amp;&amp; millis == 0)) {

    millis++;

}



join(millis);</code></pre><p>}</p>
<p>通过源码可以发现，Thread.join 是通过 synchronized + Object.wait() 实现的。</p>
<p>Thread.join 的应用场景是：当一个线程必须等待其他线程执行完毕才能继续执行，比如合并计算。</p>
<p>线程的中断</p>
<p>有时候我们需要中断一个正在运行的线程，一种很容易想到的方法是在线程的 run() 方法中加一个循环条件：</p>
<p>publicclass ThreadInterruptTest1 {</p>
<pre><code>static class InterruptThread extendsThread{

    private boolean running;



    public InterruptThread(boolean running){

        this.running = running;

    }



    public boolean isRunning() {

        return running;

    }



    public void setRunning(boolean running){

        this.running = running;

    }



    @Override

    public void run() {

        while (running){

           System.out.println(Thread.currentThread().getName() + &quot; isrunning&quot;);

        }

    }

}



public static void main(String[] args)throws InterruptedException {

    InterruptThread thread = newInterruptThread(true);

    thread.start();



    Thread.sleep(5000);

    thread.setRunning(false);

}</code></pre><p>}</p>
<p>上面的代码中线程 InterruptThread 有一个标志位 running，当这个标志位为 true 时才可以运行。</p>
<p>因此我们可以通过修改这个标志位为 false 来中断该线程。</p>
<p>其实Thread 内部也为我们提供了同样的机制 ：</p>
<p>方法名        方法介绍</p>
<p>public void interrupt()        试图中断调用线程，设置中断标志位为false</p>
<p>public boolean isInterrupted()        返回调用线程是否被中断</p>
<p>public static boolean interrupted()        返回当前线程是否被中断的状态值，同时将中断标志位复位（设为 false）</p>
<p>1.public void interrupt()</p>
<p>它的作用是设置标志位为 false，能否达到中断调用线程的效果，还取决于该线程是否可以响应中断（说直白些就是吃不吃这套），比如 Runnable 的 run() 方法就无法响应中断。</p>
<p>因此我们对执行 Runnable 任务的线程调用 interrupt() 方法后，该线程也不会中断，举个例子：</p>
<p>publicclass ThreadInterruptTest2 {</p>
<pre><code>static class UnInterruptThread extendsThread{

    public UnInterruptThread(String s) {

        setName(s);

    }



    @Override

    public void run() {

        while (true) {

           System.out.println(Thread.currentThread().getName() + &quot; isrunning!&quot;);

        }

    }

}



static class  UnInterruptRunnable implements Runnable{



    @Override

    public void run() {

        while (true) {

           System.out.println(Thread.currentThread().getName() + &quot; isrunning!&quot;);

        }

    }

}



public static void main(String[] args)throws InterruptedException {

   UnInterruptThread thread = new UnInterruptThread(&quot;无法中断的线程&quot;);</code></pre><p>//       Thread thread = new Thread(new UnInterruptRunnable(), “无法中断”);</p>
<pre><code>    thread.start();



    //先让它执行一秒

    Thread.sleep(1000);



    thread.interrupt();



    //不立即退出

    Thread.sleep(3000);

}</code></pre><p>}</p>
<p>这两种方式创建的线程，在调用 thread.interrupt() 方法后仍然会继续执行！</p>
<p>这时就需要用到上面 Thread 提供的第二个关于中断的方法 isInterrupted() 了。</p>
<p>2.publicboolean isInterrupted()</p>
<p>我们可以通过 isInterrupted() 知道调用线程是否被中断，以此来作为线程是否运行的判断标志。</p>
<p>   isInterrupted() 在刚创建时默认为 false 不用多说；<br>    线程有许多方法可以响应中断（比如 Thread.sleep()，Thread.wait()），这些方法在收到中断请求、抛出 InterruptedException 之前，JVM会先把该线程的中断标志位复位，这时调用 isInterrupted 将会返回 false；<br>    线程结束后，线程的中断标志位也会复位为 false。</p>
<p>举个例子：</p>
<p>publicclass ThreadInterruptTest {</p>
<pre><code>/**

 * 调用Thread.sleep() 方法的线程，线程如果在 sleep 时被中断，会抛出 InterruptedException

 * 我们在代码中进行捕获，并且查看 JVM 是否将中断标志位重置

 */

static class SleepThread extends Thread{

    public SleepThread(String s) {

        setName(s);

    }

    @Override

    public void run() {

        while (!isInterrupted()){

            try {

                Thread.sleep(500);

               System.out.println(Thread.currentThread().getName() +System.currentTimeMillis());

            } catch (InterruptedExceptione) {

                e.printStackTrace();

               System.out.println(&quot;SleepRunner 在 sleep 时被中断了，此时中断标志位为：&quot; + isInterrupted());

            }

        }

    }

}



/**

 * 希望通过这个线程了解：线程运行结束后，中断标志位会重置

 */

static class BusyThread extends Thread{



    public BusyThread(String s) {

        setName(s);

    }



    @Override

    public void run() {

        while (!isInterrupted()){

           System.out.println(Thread.currentThread().getName() +System.currentTimeMillis());

        }

    }

}



public static void main(String[] args)throws InterruptedException {

   SleepThread sleepThread = new SleepThread(&quot;SleepRunner：&quot;);

   BusyThread busyThread = new BusyThread(&quot;BusyRunner：&quot;);

    //新创建的线程 中断标志为 false

   System.out.println(&quot;SleepThread 新创建时的中断标志位：&quot; +sleepThread.isInterrupted());



    Thread.sleep(2000);

    //启动两个线程

    sleepThread.start();

    busyThread.start();

    //让它们运行一秒

    Thread.sleep(1000);

    //分别中断两个线程

    sleepThread.interrupt();

    busyThread.interrupt();

    //查看线程的中断标志位

    Thread.sleep(2000);

   System.out.println(&quot;由于中断标志位变为 true 导致运行结束的线程，中断标志位为: &quot; + busyThread.isInterrupted());



    Thread.sleep(1000);

}</code></pre><p>}</p>
<p>上述代码中 两个线程都使用 isInterrupted 作为循环执行任务的条件，其中SleepThread 方法调用了 Thread.sleep，这个方法的会响应中断，抛出异常。</p>
<p>可以看到：<br>    线程中，在抛出 InterruptedException 前 JVM 的确会重置中断标志位为 false<br>    这将导致以 isInterrupted 方法作为循环执行任务的线程无法正确中断</p>
<p>3.publicstatic boolean interrupted()</p>
<p>Thread.interrupted() 方法是一个静态方法，它会返回调用线程（而不是被调用线程）的中断标志位，返回后重置中断标志位。</p>
<p>因此Thread.interrupted() 第二次调用永远返回 false。</p>
<p>源码：</p>
<p>publicstatic boolean interrupted() {<br>    return currentThread().isInterrupted(true);<br>}</p>
<h2><span id="总结">总结</span></h2><p>线程的基本概念和关键方法，还有一些不建议使用的方法没有介绍，是因为它们有很多副作用，比如 suspend() 方法在调用后虽然线程会进入休眠状态，却不会释放资源，很容易引发死锁问题；同样，stop() 方法终结一个线程时无法保证这个线程有机会释放资源，也会导致一些不确定问题。</p>
<h1><span id="五-总结">五、总结</span></h1><p>我们需要了解并发，为什么需要并发，还必须知道并发的优缺点，同时清楚使用并发编程之后所带来的问题：频繁上下文切换问题和线程安全问题等等，后面在并发编程的时候就朝着这些问题去编程，尝试解决这些问题，让并发编程发挥出真正的作用。<br>理解Java并发的关键点在于理解它的两大核心（JMM内存模型【工作内存和主内存】和happes-before规则【八大规则】）以及三大特性：原子性、可见性、有序性</p>
]]></content>
      <categories>
        <category>Java并发</category>
      </categories>
      <tags>
        <tag>java,并发</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-教程-简介</title>
    <url>/2020/04/06/Spring-%E6%95%99%E7%A8%8B-%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<h1><span id="spring是什么">spring是什么</span></h1><p>spring是一个企业级应用的开源框架，它也是轻量级的、一站式的、面向切面编程的、依赖注入DI和容器IOC的、模块化的框架。<br>总的来说，Spring就是用来替代更加重量级的企业级的Java技术。</p>
<h1><span id="spring能做什么">spring能做什么</span></h1><p>Spring框架是由于软件开发的复杂性而创建的。Spring使用的是基本的JavaBean来完成以前只可能由EJB完成的事情。然而，Spring的用途不仅仅限于服务器端的开发。从简单性、可测试性和松耦合性的角度而言，绝大部分Java应用都可以从Spring中受益。<br>spring实现了使用简单的组件将Java对象配置组合成 了一个复杂的应用，在Spring中可以使用XML和Java注解组合这些对象。Spring对JavaEE中非常难开发的一些API（JDBC、JavaMail、远程调用等），都提供了封装，大大降低了这些API的应用难度。</p>
<ul>
<li>轻量级：立于各种应用服务器，基于Spring框架的应用，可以真正实现Write Once，Run Anywhere的承诺。</li>
<li>非侵入式：也就是自己开发的类不依赖Spring的API接口，对现有的类结构没有影响，也能够增强JavaBean的功能  </li>
<li>IOC容器：spring是一个容器，因为它包含并且管理应用对象的生命周期。<br>降低了业务对象替换的复杂性，提高了组件之间的解耦。</li>
<li>一站式：在AOP和IOC的基础上可以整合出各种企业应用的开源框架和优秀的第三方类库（实际上Spring自身也提供了展现层的SpringMVC和持久层的JDBC）;<br>spring的高度开放性，并不强制应用完全依赖于Spring，开发者可自由选用Spring框架的部分或全部。<br>总的来说Spring可以简化Java的开发：</li>
</ul>
<ol>
<li>基于POJO（也叫Java bean）轻量级和最小侵入式开发</li>
<li>通过IOC、依赖注入和面向接口实现松耦合</li>
<li>基于切面进行声明式编程</li>
<li>通过切面和模板来减少样板式代码</li>
</ol>
<a id="more"></a>
<h1><span id="spring为什么出现">spring为什么出现</span></h1><p><img src="/images/Spring-1-1.png" alt="B/S结构"><br>这张图上展示了一个基于SSH,B/S结构的单体Java应用的搭建过程，首先通过浏览器进入到Filter拦截器，进入到Structs2，通过Service层进入到Hibernate，从而进行操作数据库，若整个过程都是由SpringIOC容器控制就显得那么简单了。说白了就是为了简化复杂的操作过程，减少问题的出现。这张图向我们展示了一个比较基础的JavaWeb的搭建过程。万变不离其宗，后来使用的SSM框架，现在比较火的微服务架构，都离不开这张图上展示的内容所提供给大家的思想。每个框架的实现宗旨都是一样的，只不过实现的方式不一样。其实在这个框架最初的时候应该是以JSP+Servlet比较常用，后来为了解决前后端分离的问题，降低耦合度。将这些功能结构按照MVC分层实现。<br>个人的理解MVC为一种程序设计思想，可以很多场合使用到，从Web、后端、移动端在很多的场合下将MVC作为一种程序设计思想应该是比较恰当的。</p>
<h1><span id="spring结构体系模块化">spring结构体系（模块化）</span></h1><p><img src="/images/Spring-1-2.png" alt="Spring结构"></p>
<h2><span id="核心容器">核心容器</span></h2><p>核心容器由spring-core，spring-beans，spring-context，spring-context-support和spring-expression（SpEL，Spring表达式语言，Spring Expression Language）等模块组成，它们的细节如下：<br>-** spring-core模块**提供了框架的基本组成部分，包括 IoC容器 和依赖注入功能。</p>
<p>-** spring-beans 模块**提供 BeanFactory，工厂模式的微妙实现，它移除了编码式单例的需要，并且可以把配置和依赖从实际编码逻辑中解耦。</p>
<p>-** context模块**建立在由core和 beans 模块的基础上建立起来的，它以一种类似于JNDI注册的方式访问对象。Context模块继承自Bean模块，并且添加了国际化（比如，使用资源束）、事件传播、资源加载和透明地创建上下文（比如，通过Servelet容器）等功能。Context模块也支持Java EE的功能，比如EJB、JMX和远程调用等。ApplicationContext接口是Context模块的焦点。spring-context-support提供了对第三方库集成到Spring上下文的支持，比如缓存（EhCache, Guava, JCache）、邮件（JavaMail）、调度（CommonJ, Quartz）、模板引擎（FreeMarker, JasperReports, Velocity）等。</p>
<p>-<strong>spring-expression模块</strong>提供了强大的表达式语言，用于在运行时查询和操作对象图。它是JSP2.1规范中定义的统一表达式语言的扩展，支持set和get属性值、属性赋值、方法调用、访问数组集合及索引的内容、逻辑算术运算、命名变量、通过名字从Spring IoC容器检索对象，还支持列表的投影、选择以及聚合等。</p>
<p>它们的完整依赖关系如下图所示：<br><img src="/images/Spring-1-3.png" alt="Spring依赖关系图"><br><img src="/images/Spring-1-4.png" alt="Spring关系"></p>
<h2><span id="数据访问集成">数据访问/集成</span></h2><p>数据访问/集成层包括 JDBC，ORM，OXM，JMS 和事务处理模块，它们的细节如下：<br>注：JDBC=Java Data Base Connectivity，ORM=Object Relational Mapping，OXM=Object XML Mapping，JMS=Java Message Service）<br>• JDBC 模块提供了JDBC抽象层，它消除了冗长的JDBC编码和对数据库供应商特定错误代码的解析。<br>• ORM 模块提供了对流行的对象关系映射API的集成，包括JPA、JDO和Hibernate等。通过此模块可以让这些ORM框架和spring的其它功能整合，比如前面提及的事务管理。<br>• OXM 模块提供了对OXM实现的支持，比如JAXB、Castor、XML Beans、JiBX、XStream等。<br>• JMS 模块包含生产（produce）和消费（consume）消息的功能。从Spring 4.1开始，集成了spring-messaging模块。。<br>• 事务模块为实现特殊接口类及所有的 POJO 支持编程式和声明式事务管理。（注：编程式事务需要自己写beginTransaction()、commit()、rollback()等事务管理方法，声明式事务是通过注解或配置由spring自动处理，编程式事务粒度更细）</p>
<h2><span id="web">Web</span></h2><p>Web 层由 Web，Web-MVC，Web-Socket 和 Web-Portlet 组成，它们的细节如下：<br>• Web 模块提供面向web的基本功能和面向web的应用上下文，比如多部分（multipart）文件上传功能、使用Servlet监听器初始化IoC容器等。它还包括HTTP客户端以及Spring远程调用中与web相关的部分。。<br>• Web-MVC 模块为web应用提供了模型视图控制（MVC）和REST Web服务的实现。Spring的MVC框架可以使领域模型代码和web表单完全地分离，且可以与Spring框架的其它所有功能进行集成。<br>• Web-Socket 模块为 WebSocket-based 提供了支持，而且在 web 应用程序中提供了客户端和服务器端之间通信的两种方式。<br>• Web-Portlet 模块提供了用于Portlet环境的MVC实现，并反映了spring-webmvc模块的功能。</p>
<h2><span id="其他">其他</span></h2><p>还有其他一些重要的模块，像 AOP，Aspects，Instrumentation，Web 和测试模块，它们的细节如下：<br>• AOP 模块提供了面向方面的编程实现，允许你定义方法拦截器和切入点对代码进行干净地解耦，从而使实现功能的代码彻底的解耦出来。使用源码级的元数据，可以用类似于.Net属性的方式合并行为信息到代码中。<br>• Aspects 模块提供了与 AspectJ 的集成，这是一个功能强大且成熟的面向切面编程（AOP）框架。<br>• Instrumentation 模块在一定的应用服务器中提供了类 instrumentation 的支持和类加载器的实现。<br>• Messaging 模块为 STOMP 提供了支持作为在应用程序中 WebSocket 子协议的使用。它也支持一个注解编程模型，它是为了选路和处理来自 WebSocket 客户端的 STOMP 信息。<br>• 测试模块支持对具有 JUnit 或 TestNG 框架的 Spring 组件的测试。</p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring,教程</tag>
      </tags>
  </entry>
</search>
